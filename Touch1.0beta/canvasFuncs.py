from Tkinter import *
from PIL import Image # Image Module
import ImageTk # Used to convert png Images into tkinter compatible images
import touchManager # ElectrOS module to detect clicks on the screen

import tkFont
import time
import random

class CanvasFuncs():
    def __init__(self):
        self.rawImages = [] # used to store images generated by PIL for canvas use
        self.images = [] # all canvas-made images

        self.icons = []
        warningBox = ""

        self.goClick = True

        self.canvas = False

        #stuff for ElectrOS buttons
        self.buttonsList = []
        self.hoverColor = []
        self.normalColor = []
        self.commands = []

        self.boxes = []
        self.cursor = ""
        self.current = 0
        self.cursorMargin = 5;
        self.active = False

        self.textBoxKeys = []
        self.textBoxCode = []
        self.textBoxText  = []
        self.textBoxTypes = []
        self.cursorStatus = True

        self.defText = []

        self.width = 0
        
        #empty array to store textboxes

        #error message variables
        self.messages = []
        self.messageTitle = []
        self.messageText = []
        self.messageImg = []

        self.going = True

    def trans(self, x, y):
        currentx = x
        currenty = y

        currentx2 = x+1
        currenty2 = y+1
        while True:
            transitionOval = self.canvas.create_oval(currentx, currenty, currentx2, currenty2, fill="#bfbfbf", stipple='gray12')
            currentx=currentx-40
            currenty=currenty-40
            currentx2=currentx2+40
            currenty2=currenty2+40
            self.tk.update()
            time.sleep(0.01)
            self.canvas.delete(transitionOval)
            if currentx <= 100:
                break
        while True:
            transitionOval = self.canvas.create_oval(currentx, currenty, currentx2, currenty2, fill="#bfbfbf", stipple='gray12')
            currentx=currentx+40
            currenty=currenty+40
            currentx2=currentx2-40
            currenty2=currenty2-40
            self.tk.update()
            time.sleep(0.01)
            self.canvas.delete(transitionOval)
            if currentx >= x+10:
                break

    def newScreen(self):
        # create a new Screen-Use App(SUA)

        
        
        self.rawImages = []
        self.images = []
        try:
            self.trans(self.screenWidth/2, self.screenHeight/2)
            self.canvas.delete("all")
                
        except:
            
            self.tk = Tk()
            
            self.screenWidth = self.tk.winfo_screenwidth()
            self.screenHeight = self.tk.winfo_screenheight()
            self.canvas=Canvas(self.tk, width=self.screenWidth, height=self.screenHeight, bd=0, highlightthickness=0, relief='ridge')
            self.canvas.pack()
            manageTouch = touchManager.DetectClicks()
            self.canvas.bind_all('<Button-1>', manageTouch.click_detect)
            self.tk.overrideredirect(1)

            #self.canvas.configure(cursor='none')
            # add '#' for touchscreens remove '#' for normal computers

            return self.tk, self.canvas
        
    def createImage(self, src, x1, y1, width, height):
        background = Image.open(src) # use PIL to open a certain image 
        background = background.resize((width, height), Image.ANTIALIAS) # resize it based on width and height inputted to function
        self.rawImages.append(ImageTk.PhotoImage(background)) # add to rawimages

        self.images.append(self.canvas.create_image(x1, y1, anchor=NW, image=self.rawImages[len(self.rawImages)-1])) # create the image on the canvas len(rawImages)-1 used to get the last image added on to the array
        
        return len(self.images)-1 # return array position of image

    def createIcon(self, src, x1, y1, width, height, command):
        arrayInfo = [self.createImage(src, x1, y1, width, height), x1, y1, width, height, command] # temporary variable to store icon information(used for clicks)
        self.icons.append(arrayInfo)

    def removeImage(self, index):
        self.canvas.delete(self.images[index]) # hide the image fom the screen
        self.images.remove(self.images[index]) #completely remove it

        #same thing with the the rawImages from the PIL images
        self.rawImages.remove(self.rawImages[index])

    def createButton(self, x, y, width, height, bcolor, fcolor, borderWidth, text, command):
        self.buttonsList.append(self.canvas.create_rectangle(x, y, x+width, y+height, fill=bcolor, outline=fcolor, width=borderWidth))
        self.canvas.create_text(int(x+(width/2)), int(y+(height/2)), text=text, font=("Helvetica", height/3, "bold"))
        self.hoverColor.append(fcolor)
        self.normalColor.append(bcolor)
        self.commands.append(command)

    def createText(self, x, y, text, color, font, anchorNW):
        if anchorNW:
            self.canvas.create_text(x, y, text=text, anchor=NW, font=font, fill=color)
        else:
            self.canvas.create_text(x, y, text=text, font=font, fill=color)

    def warning(self, change):
        pass

    def click(self, event):
        if self.goClick:
            self.xMouse, self.yMouse = event.x, event.y
            for allButtons in self.buttonsList:
                self.buttonCoords = self.canvas.coords(allButtons)
            
                if self.xMouse >= self.buttonCoords[0] and self.yMouse >= self.buttonCoords[1] and self.xMouse <= self.buttonCoords[2] and self.yMouse <= self.buttonCoords[3]:
                    self.commands[self.buttonsList.index(allButtons)]()
                    self.canvas.itemconfig(allButtons, fill="white")
                
    def deleteAll(self):
        print("[ok] WIPE COMPLETED")
        self.buttonsList = []
        self.hoverColor = []
        self.normalColor = []
        self.commands = []
        
    
    def checkHit(self, event):
        self.xMouse, self.yMouse = event.x, event.y
        x =0
        for allButtons in self.buttonsList:
            try:
                self.buttonCoords = self.canvas.coords(allButtons)
                try:
                    if self.xMouse >= self.buttonCoords[0] and self.yMouse >= self.buttonCoords[1] and self.xMouse <= self.buttonCoords[2] and self.yMouse <= self.buttonCoords[3]:
                
                        self.canvas.itemconfig(allButtons, fill=self.hoverColor[self.buttonsList.index(allButtons)])
                        self.tk.config(cursor="hand2")
                    else:
                        self.canvas.itemconfig(allButtons, fill=self.normalColor[self.buttonsList.index(allButtons)])
                        self.tk.config(cursor="")
                except:
                    pass
                x=x+1
            except:
                pass


    def onTextClick(self, event):
       
        # called when screen is clicked, checks if the click is aimed at the textbox
        counnter=0
        for box in self.boxes: # get all the textboxes (canvas rectangles added to array)
            #check every textbox
            self.currentCoords = self.canvas.coords(box)
            # get the coordinates of the current textbox

            try:
                self.currentCoords[0] # see if the rectangle is still there and ha not been deleted by canvas.delete()
            except:
                # if it is no longer a rectangle delete it from the textbox arrays and exit the function
                self.boxes.remove(box)

                self.textBoxKeys.remove(box)
                self.textBoxCode.remove(box)
                self.textBoxText.remove(box)
                self.textBoxTypes.remove(box)
                return 0

            
           
            if event.x >= self.currentCoords[0] and event.y >= self.currentCoords[1] and event.x <= self.currentCoords[2] and event.y <= self.currentCoords[3]:
                # if the mouseclick was inside a textbox
                if self.cursor:
                    #if a text-cursor is already present one the screen
                    self.canvas.delete(self.cursor)
                    #delete it(otherwise there are two cursors on the screen
                
                
        
                try:
                    self.current = self.textBoxCode.index(box)
                    # if the textbox has already been clicked
                    font = tkFont.Font(family="Helvetica", size=h/60)
                    wText, hText = font.measure(self.textBoxKeys[self.current]),font.metrics("linespace")
                    
                    

        
                    #self.canvas.delete(self.cursor)
                    self.cursorMargin = wText+5
                except:
                    self.textBoxCode.append(box)
                    # add the textbox to the textboxcode array to indicate it has already been clicked
                    self.textBoxText.append(self.canvas.create_text(self.currentCoords[0]+5, self.currentCoords[1]+5, text=""))
                    #add an empty text function to store all of the text that is typed in the textbox 
                    
                    self.current = self.textBoxCode.index(box)
                    #get the array index of the current textbox to access other arrays
                    
                    self.textBoxKeys.append("")
                    font = tkFont.Font(family="Helvetica", size=self.screenHeight/60)
                    wText, hText = font.measure(""),font.metrics("linespace")
                    

        
                    #self.canvas.delete(self.cursor)
                self.cursorMargin = wText+5
                    
                
                while self.cursorStatus:
                    # add

                    for cursors in range(0, 100):
                        self.cursor = self.canvas.create_line(self.currentCoords[0]+self.cursorMargin, self.currentCoords[1]+5, self.currentCoords[0]+self.cursorMargin, self.currentCoords[3]-5)
                        # create a line cursor
                        self.tk.update()
                    
                        time.sleep(0.005)
                        self.canvas.delete(self.cursor)
                    
                    self.canvas.delete(self.cursor)
                    self.tk.update()
                    time.sleep(0.5)

        counter=counter+1
    def endCursor(self):
        self.cursorStatus = False
        try:
            self.canvas.delete(self.cursor)
        except:
            pass
        self.cursor = ""

    def onTextType(self, event):
        font = tkFont.Font(family="Helvetica", size=self.screenHeight/60)
        

        text = event.char.split('')
        
        if len(self.textBoxKeys) != 0:
            font.measure(self.textBoxKeys[self.current])
            if event.keysym == "BackSpace":
                self.textBoxKeys[self.current]=self.textBoxKeys[self.current][:-1]
            elif len(event.char) > 2 or font.measure(self.textBoxKeys[self.current]) >= self.width-10 or len(text) > 1:
                pass
            else:
                
                self.textBoxKeys[self.current]=self.textBoxKeys[self.current]+event.char
                
            
            try:
                self.canvas.delete(self.defText[self.current])
            except:
                pass
            self.canvas.delete(self.textBoxText[self.current])
        
            str1 = self.textBoxKeys[self.current]

            if self.textBoxTypes[self.current] == 0:
                self.textBoxText[self.current] = self.canvas.create_text(int(self.currentCoords[0]+5), int(self.currentCoords[1]+5), anchor=NW, text=str1, font=("Helvetica", self.screenHeight/60))
            else:
                self.textBoxText[self.current] = self.canvas.create_text(int(self.currentCoords[0]+5), int(self.currentCoords[1]+5), anchor=NW, text="*"*len(str1), font=("Helvetica", self.screenHeight/60))
                str1 = "*"*len(str1)
        
            wText, hText = font.measure(str1),font.metrics("linespace")

        

        
            #self.canvas.delete(self.cursor)
            self.cursorMargin = wText+5
        
            #self.cursor = self.canvas.create_line(self.currentCoords[0]+self.cursorMargin, self.currentCoords[1]+5, self.currentCoords[0]+self.cursorMargin, self.currentCoords[3]-5)
           
    def getAll(self): # a function to get all the text from the textboxes
        alldata = []
        for keys in self.textBoxKeys:
            alldata.append(keys)
        return alldata
        
    def deleteAll(self): # function used for deleting everything from the graphics arrays when a new screen is created       
        self.textBoxKeys = []
        self.boxes = []
        self.textBoxCode = []
        self.textBoxText = []
        self.textBoxTypes = []
        self.defText = []

        self.buttonsList = []
        self.hoverColor = []
        self.normalColor = []
        self.commands = []
            

        
                                  
    def textBox(self, x, y, width, height, default, typeB):
        #x: the x coordinate of the text box
        #y: the y coordinate of the text box
        #width: the width of the text box
        #default: the text that will be shown inside the textbox use "" for no text
        #typeB: the typ of textBox 0 for normal, 1 for password
        
        self.textBoxTypes.append(typeB)
        # add to specific array for text box types
        
        self.boxes.append(self.canvas.create_rectangle(x, y, x+width, y+height, fill="white", outline="white"))
        self.defText.append(self.canvas.create_text(x+5, y+height/2, text=default, font=("Helvetica", height/3), anchor=W, fill="grey"))

    def Error(self, messageP):
        if len(self.messages) == 0:
        
            self.messages.append(self.canvas.create_rectangle(0-(w/3), (h-50), 0, h-130, fill="#1a1a1a", outline="#1a1a1a"))

            self.messageTitle.append(self.canvas.create_text(0-(w/3)+10, h-110, text="Error", font=("Helvetica", int(len(messageP)/2)), anchor=W, fill="white"))
            self.messageText.append(self.canvas.create_text(0-(w/3)+10, h-75, text=messageP, font=("Helvetica", int(len(messageP)/2.5)), anchor=W, fill="grey"))

        

            messageImg = Image.open("images/logo/system/notifications/Error.png")
            messageImg = messageImg.resize((40, 40), Image.ANTIALIAS)
            messageImg = ImageTk.PhotoImage(messageImg)
            self.messageImg.append(self.canvas.create_image(0-70, h-110, anchor=NW, image=messageImg))

            currentBoxIndex = len(self.messages)-1
        
            pos1 = 0
            while True:
            
                currentMessagePos= canvas.coords(self.messages[currentBoxIndex])
                if currentMessagePos[0] < -5:
                    time.sleep(0.01)
                    self.canvas.move(self.messages[currentBoxIndex], 10, 0)
                    self.canvas.move(self.messageText[currentBoxIndex], 10, 0)
                    self.canvas.move(self.messageTitle[currentBoxIndex], 10, 0)
                    self.canvas.move(self.messageImg[currentBoxIndex], 10, 0)
                    pos1=pos1+5
                    self.tk.update()
                
                else:
                    break

            time.sleep(5)
            while True:
            
                currentMessagePos= canvas.coords(self.messages[currentBoxIndex])
                if currentMessagePos[2] > -5:
                    time.sleep(0.01)
                    self.canvas.move(self.messages[currentBoxIndex], -10, 0)
                    self.canvas.move(self.messageText[currentBoxIndex], -10, 0)
                    self.canvas.move(self.messageTitle[currentBoxIndex], -10, 0)
                    self.canvas.move(self.messageImg[currentBoxIndex],- 10, 0)
                    pos1=pos1+5
                    self.tk.update()
                
                else:
                    break
            self.messages = []
            self.messageText = []
            self.messageTitle = []
            self.messageImg = []

    def start(self):
        canvas.config(bg="white")
        logo = Image.open("icons/logo.png")
        logo = logo.resize((w/5, w/5), Image.ANTIALIAS)
        logo1 = ImageTk.PhotoImage(logo)

        imglogo = canvas.create_image((w/2)-((w/5)/2), (h/2)-((w/5)/2), anchor=NW, image=logo1)
        
        tk.update()
    def fullScreenStart(self, text):
        message = self.canvas.create_text(self.screenWidth/2, self.screenHeight/2, text=text, font=("Segoe UI", self.screenWidth/27), fill="white")
        #cnvsfncs.
        colors = ["#ffcc00", "#3399ff", "#66ff66", "#ff66ff", "#3333ff"]
        rColor = 100
        gColor = 100
        bColor = 100

        n1C = 1
        n2C = 1
        n3C = 1
        global going
        while going:
            

            
            n1 = random.randint(1, 2)
            n2 = random.randint(3, 4)
            n3 = random.randint(4, 5)

            rColor = rColor+(n1C*n1)
            gColor = gColor+(n2C*n2)
            bColor = bColor+(n3C*n3)

            if rColor >= 230:
                n1C = -1
            if gColor >= 230:
                n2C = -1
            if bColor >= 230:
                n3C = -1
                
            if rColor <= 30:
                n1C = 1
            if gColor <= 30:
                n2C = 1
            if bColor <= 30:
                n3C = 1
            
            
            #currentColor = colors[n1]
            currentColor = '#%02x%02x%02x' % (rColor, gColor, bColor)
            self.canvas.configure(bg=currentColor)
            self.tk.update()
            time.sleep(0.03)
        canvas.delete(message)
    def fullScreen(self, text):
        global going
        going= True
        
        self.fullScreenStart(text)
        
        #loading screen must be in a thread so that other actions can take place at the same time
    def fullScreenStop(self):
        global going
        going = False
